{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","autoComplete","onChange","changed","options","map","opt","key","displayValue","validationError","ValidationError","id","Label","label","module","exports","connect","state","error","auth","loading","isAuth","token","building","burgerBuilder","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onSetAuthRedirectPath","controls","type","placeholder","validation","required","valid","minLength","inputChangedHandler","e","controlName","updatedControls","updatedObj","target","checkValidity","setState","submitHandler","preventDefault","switchAuthModeHandler","prevState","this","console","log","formElementsArray","config","form","el","errorMessage","message","to","Auth","onSubmit","btnType","clicked","Component"],"mappings":"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","file":"static/js/4.09e04fca.chunk.js","sourcesContent":["import React from 'react'\n\nimport classes from './Input.module.css'\n\nexport default function Input(props) {\n\n    let inputElement = null;\n    let inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n    switch (props.elementType) {\n        case ('input'):\n\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                autoComplete = {props.elementConfig.autoComplete}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(opt => (\n                    <option\n                        key={opt.value}\n                        value={opt.value}>\n                        {opt.displayValue}\n                    </option>\n                ))}\n            </select>;\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                onChange={props.changed}\n                {...props.elementConfig}\n                value={props.value} />;\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p \n        className={classes.ValidationError}>\n            Please enter a valid {props.id}!\n            </p>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport Input from './../../components/UI/Input/Input'\nimport Button from './../../components/UI/Button/Button'\nimport Spinner from './../../components/UI/Spinner/Spinner'\n\nimport classes from './Auth.module.css'\n\nimport * as actions from './../../store/actions/index'\n\nimport { updatedObj, checkValidity } from './../../shared/transUtilities'\n\nconst mapStateToProps = state => ({\n    error: state.auth.error,\n    loading: state.auth.loading,\n    isAuth: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(class Auth extends Component {\n\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your email',\n                    autoComplete: 'email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    email: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your password',\n                    autoComplete: 'current-password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignUp: true\n\n    }\n\n    componentDidMount() {\n        if (!this.props.building && this.props.authRedirectPath !== '/') {\n            console.log(\"return to home\");\n\n            this.props.onSetAuthRedirectPath()\n        }\n    }\n\n    inputChangedHandler = (e, controlName) => {\n\n        const updatedControls = updatedObj(this.state.controls, {\n            [controlName]: updatedObj(this.state.controls[controlName], {\n                value: e.target.value,\n                valid: checkValidity(e.target.value,\n                    this.state.controls[controlName].validation),\n                touched: true\n            })\n        })\n\n        this.setState({ controls: updatedControls })\n\n    }\n\n    submitHandler = e => {\n        e.preventDefault()\n        const email = this.state.controls.email.value\n        const password = this.state.controls.password.value\n        const isSignUp = this.state.isSignUp\n        this.props.onAuth(email, password, isSignUp)\n\n    }\n\n    switchAuthModeHandler = () => this.setState(prevState => ({\n        isSignUp: !prevState.isSignUp\n    }))\n\n    render() {\n\n        const formElementsArray = []\n        for (let key in this.state.controls) {\n\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        let form = formElementsArray.map(el =>\n            <Input\n                elementType={el.config.elementType}\n                elementConfig={el.config.elementConfig}\n                value={el.config.value}\n                invalid={!el.config.valid}\n                shouldValidate={el.config.validation}\n                touched={el.config.touched}\n                changed={e => this.inputChangedHandler(e, el.id)}\n                id={el.id}\n                key={el.id}\n            />)\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        let errorMessage = null\n        if (this.props.error) {\n            errorMessage = <p>{this.props.error.message}</p>\n        }\n\n        if (this.props.isAuth) {\n            return <Redirect to={this.props.authRedirectPath} />\n        }\n        return (\n            <div className={classes.Auth}>\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType='Success'>SUBMIT</Button >\n                </form>\n                <Button\n                    clicked={this.switchAuthModeHandler}\n                    btnType='Danger'>\n                    SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}\n                </Button >\n            </div>\n        )\n    }\n})\n"],"sourceRoot":""}