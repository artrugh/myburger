{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/formContactData.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","autoComplete","onChange","changed","options","map","opt","key","displayValue","validationError","ValidationError","id","Label","label","module","exports","CheckoutSummary","style","width","margin","Burger","ingredients","Button","clicked","checkoutCancelled","btnType","checkoutContinued","completeForm","type","placeholder","validation","required","minLength","valid","formContactData","name","email","street","zipCode","country","deliveryMethod","withErrorHandler","useState","orderForm","setOrderForm","formIsValid","setFormIsValid","useSelector","state","burgerBuilder","totalPrice","loading","order","token","auth","userId","dispatch","useDispatch","formElementsArray","config","form","onSubmit","e","preventDefault","formData","orderData","actions","onOrderBurger","price","el","updatedFormEl","updatedObj","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","withRouter","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.399bf385.chunk.js","sourcesContent":["import React from 'react'\n\nimport classes from './Input.module.css'\n\nexport default function Input(props) {\n\n    let inputElement = null;\n    let inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n    switch (props.elementType) {\n        case ('input'):\n\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                autoComplete = {props.elementConfig.autoComplete}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(opt => (\n                    <option\n                        key={opt.value}\n                        value={opt.value}>\n                        {opt.displayValue}\n                    </option>\n                ))}\n            </select>;\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                onChange={props.changed}\n                {...props.elementConfig}\n                value={props.value} />;\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p \n        className={classes.ValidationError}>\n            Please enter a valid {props.id}!\n            </p>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from 'react'\nimport classes from './CheckoutSummary.module.css'\n\nimport Burger from './../../Burger/Burger'\nimport Button from './../../UI/Button/Button'\n\nexport default function CheckoutSummary(props) {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{\n                width: \"100%\",\n                margin: \"auto\",\n            }}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button\n                clicked={props.checkoutCancelled}\n                btnType=\"Danger\" >CANCEL</Button>\n            <Button\n                clicked={props.checkoutContinued}\n                btnType=\"Success\" >CONTINUE</Button>\n\n        </div>\n    )\n}\n","const completeForm = (elementType, type, placeholder) => {\n    return {\n        elementType: elementType,\n        elementConfig: {\n            type: type,\n            placeholder: placeholder\n        },\n        value: '',\n        validation: {\n            required: true,\n            minLength: 5,\n        },\n        valid: false,\n        touched: false\n    }\n}\n\nexport const formContactData = {\n    name: completeForm('input', 'text', 'Your name'),\n    email: completeForm('input', 'email', 'Your email'),\n    street: completeForm('input', 'text', 'street'),\n    zipCode: completeForm('input', 'text', 'ZIP Code'),\n    country: completeForm('input', 'text', 'Your country'),\n    deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n            options: [\n                { value: 'fastest', displayValue: 'Fastest' },\n                { value: 'cheapest', displayValue: 'Cheapest' }\n            ],\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true\n    }\n}","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport classes from './ContactData.module.css'\n\nimport axios from './../../../axios-orders'\n\nimport { updatedObj, checkValidity } from './../../../shared/transUtilities'\n\nimport Button from './../../../components/UI/Button/Button'\nimport Spinner from './../../../components/UI/Spinner/Spinner'\nimport Input from './../../../components/UI/Input/Input'\nimport withErrorHandler from './../../../hoc/withErrorHandler/withErrorHandler'\n\nimport * as actions from './../../../store/actions/index'\n\nimport { formContactData } from './formContactData'\n\nexport default withErrorHandler(function ContactData(props) {\n\n    // STATE \n    const [orderForm, setOrderForm] = useState(formContactData)\n    const [formIsValid, setFormIsValid] = useState(false)\n\n    const ingredients = useSelector(state => state.burgerBuilder.ingredients)\n    const totalPrice = useSelector(state => state.burgerBuilder.totalPrice)\n    const loading = useSelector(state => state.order.loading)\n    const token = useSelector(state => state.auth.token)\n    const userId = useSelector(state => state.auth.userId)\n\n    // DISPATCH\n    const dispatch = useDispatch()\n    const onOrderBurger = (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n\n    //HANDLER EVENTS\n    const inputChangedHandler = (e, id) => {\n        const updatedFormEl = updatedObj(orderForm[id], {\n            value: e.target.value,\n            valid: checkValidity(e.target.value, orderForm[id].validation),\n            touched: true\n        })\n        const updatedOrderForm = updatedObj(orderForm, {\n            [id]: updatedFormEl\n        })\n        let formIsValid = true;\n        for (let id in updatedOrderForm) {\n            formIsValid = updatedOrderForm[id].valid && formIsValid\n        }\n        setOrderForm(updatedOrderForm)\n        setFormIsValid(formIsValid)\n    }\n\n\n    const orderHandler = (e) => {\n        e.preventDefault()\n        const formData = {};\n\n        for (let id in orderForm) {\n            formData[id] = orderForm[id].value;\n        }\n\n        const order = {\n            ingredients: ingredients,\n            price: totalPrice,\n            orderData: formData,\n            userId: userId\n        }\n\n        onOrderBurger(order, token)\n    }\n\n    //PRERENDER\n    const formElementsArray = []\n    for (let key in orderForm) {\n        formElementsArray.push({\n            id: key,\n            config: orderForm[key]\n        })\n    }\n\n    let form = (\n        <form onSubmit={orderHandler}>\n            {formElementsArray.map(el => (\n                <Input\n                    elementType={el.config.elementType}\n                    elementConfig={el.config.elementConfig}\n                    value={el.config.value}\n                    invalid={!el.config.valid}\n                    shouldValidate={el.config.validation}\n                    touched={el.config.touched}\n                    changed={e => inputChangedHandler(e, el.id)}\n                    id={el.id}\n                    key={el.id} />\n            ))}\n\n            <Button\n                btnType=\"Success\"\n                disabled={!formIsValid}\n            >ORDER</Button>\n        </form>\n    )\n    if (loading) {\n        form = <Spinner />\n    }\n\n    return (\n        <div className={classes.ContactData}>\n            <h4>Enter your Contact Data</h4>\n            {form}\n        </div>\n    )\n}, axios)\n","import React from 'react'\nimport { Route, withRouter, Redirect } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nimport CheckoutSummery from './../../components/Order/CheckoutSummary/CheckoutSummary'\nimport ContactData from './ContactData/ContactData'\n\n\nexport default withRouter(function Checkout(props) {\n\n    const ingredients = useSelector(state => state.burgerBuilder.ingredients)\n    const purchased = useSelector(state => state.order.purchased)\n\n    const checkoutCancelledHandler =() => {\n        props.history.goBack()\n    }\n\n    const checkoutContinuedHandler = () => {\n        props.history.replace('/checkout/contact-data')\n    }\n\n    let summary = <Redirect to=\"/\" />\n\n    if (ingredients) {\n        const purchasedRedirect = purchased ? <Redirect to=\"/\" /> : null\n        summary = (\n            <div>\n                {purchasedRedirect}\n                <CheckoutSummery\n                    checkoutCancelled={checkoutCancelledHandler}\n                    checkoutContinued={checkoutContinuedHandler}\n                    ingredients={ingredients} />\n                <Route\n                    path={props.match.path + '/contact-data'}\n                    component={ContactData} />\n            </div>\n        )\n    }\n    return summary\n})"],"sourceRoot":""}