{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","clicked","checkoutCancelled","btnType","checkoutContinued","connect","state","burgerBuilder","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","orderForm","deliveryMethod","elementType","elementConfig","options","value","displayValue","validation","valid","formIsValid","completeForm","type","placeholder","required","minLength","touched","inputChangedHandler","e","id","updatedFormEl","updatedObj","target","checkValidity","updatedOrderForm","setState","orderHandler","preventDefault","formData","price","this","name","email","street","zipCode","country","formElementsArray","key","push","config","form","onSubmit","map","el","Input","invalid","shouldValidate","changed","disabled","Spinner","ContactData","Component","axios","withRouter","purchased","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","autoComplete","onChange","opt","validationError","ValidationError","Label","label","module","exports"],"mappings":"6MAKe,SAASA,EAAgBC,GACpC,OACI,yBAAKC,UAAWC,IAAQH,iBACpB,uDACA,yBAAKI,MAAO,CACRC,MAAO,OACPC,OAAQ,SAER,kBAACC,EAAA,EAAD,CAAQC,YAAaP,EAAMO,eAE/B,kBAACC,EAAA,EAAD,CACIC,QAAST,EAAMU,kBACfC,QAAQ,UAFZ,UAGA,kBAACH,EAAA,EAAD,CACIC,QAAST,EAAMY,kBACfD,QAAQ,WAFZ,a,oFCUGE,eAZS,SAAAC,GAAK,MAAK,CAC9BP,YAAaO,EAAMC,cAAcR,YACjCS,WAAYF,EAAMC,cAAcC,WAChCC,QAASH,EAAMI,MAAMD,QACrBE,MAAOL,EAAMM,KAAKD,MAClBE,OAAQP,EAAMM,KAAKC,WAGI,SAAAC,GAAQ,MAAK,CACpCC,cAAe,SAACC,EAAWL,GAAZ,OAAsBG,EAASG,IAAuBD,EAAWL,QAGrEN,CAA6Ca,YAAgB,4MAExEZ,MAAQ,CACJa,UAAW,CACPC,eAAgB,CACZC,YAAa,SACbC,cAAe,CACXC,QAAS,CACL,CAAEC,MAAO,UAAWC,aAAc,WAClC,CAAED,MAAO,WAAYC,aAAc,cAG3CD,MAAO,UACPE,WAAY,GACZC,OAAO,IAGfC,aAAa,GAjBuD,EAiCxEC,aAAe,SAACR,EAAaS,EAAMC,GAC/B,MAAO,CACHV,YAAaA,EACbC,cAAe,CACXQ,KAAMA,EACNC,YAAaA,GAEjBP,MAAO,GACPE,WAAY,CACRM,UAAU,EACVC,UAAW,GAEfN,OAAO,EACPO,SAAS,IA9CuD,EAkDxEC,oBAAsB,SAACC,EAAGC,GAEtB,IAAMC,EAAgBC,YAAW,EAAKjC,MAAMa,UAAUkB,GAAK,CACvDb,MAAOY,EAAEI,OAAOhB,MAChBG,MAAOc,YAAcL,EAAEI,OAAOhB,MAAO,EAAKlB,MAAMa,UAAUkB,GAAIX,YAC9DQ,SAAS,IAGPQ,EAAmBH,YAAW,EAAKjC,MAAMa,UAAZ,eAC9BkB,EAAKC,IAINV,GAAc,EAElB,IAAK,IAAIS,KAAMK,EACXd,EAAcc,EAAiBL,GAAIV,OAASC,EAGhD,EAAKe,SAAS,CACVxB,UAAWuB,EACXd,YAAaA,KAvEmD,EA6ExEgB,aAAe,SAACR,GACZA,EAAES,iBACF,EAAKF,SAAS,CAAElC,SAAS,IAEzB,IAAMqC,EAAW,GAEjB,IAAK,IAAIT,KAAM,EAAK/B,MAAMa,UACtB2B,EAAST,GAAM,EAAK/B,MAAMa,UAAUkB,GAAIb,MAG5C,IAAMd,EAAQ,CACVX,YAAa,EAAKP,MAAMO,YACxBgD,MAAO,EAAKvD,MAAMgB,WAClBQ,UAAW8B,EACXjC,OAAQ,EAAKrB,MAAMqB,QAGvB,EAAKrB,MAAMuB,cAAcL,EAAO,EAAKlB,MAAMmB,QA9FyB,kEAqBpEqC,KAAKL,SAAS,CACVxB,UAAU,aACN8B,KAAMD,KAAKnB,aAAa,QAAS,OAAQ,aACzCqB,MAAOF,KAAKnB,aAAa,QAAS,QAAS,cAC3CsB,OAAQH,KAAKnB,aAAa,QAAS,OAAQ,UAC3CuB,QAASJ,KAAKnB,aAAa,QAAS,OAAQ,YAC5CwB,QAASL,KAAKnB,aAAa,QAAS,OAAQ,iBACzCmB,KAAK1C,MAAMa,eA5B8C,+BAkG9D,IAAD,OAECmC,EAAoB,GAC1B,IAAK,IAAIC,KAAOP,KAAK1C,MAAMa,UAEvBmC,EAAkBE,KAAK,CACnBnB,GAAIkB,EACJE,OAAQT,KAAK1C,MAAMa,UAAUoC,KAIrC,IAAIG,EACA,0BAAMC,SAAUX,KAAKJ,cAChBU,EAAkBM,KAAI,SAAAC,GAAE,OACrB,kBAACC,EAAA,EAAD,CACIzC,YAAawC,EAAGJ,OAAOpC,YACvBC,cAAeuC,EAAGJ,OAAOnC,cACzBE,MAAOqC,EAAGJ,OAAOjC,MACjBuC,SAAUF,EAAGJ,OAAO9B,MACpBqC,eAAgBH,EAAGJ,OAAO/B,WAC1BQ,QAAS2B,EAAGJ,OAAOvB,QACnB+B,QAAS,SAAA7B,GAAC,OAAI,EAAKD,oBAAoBC,EAAGyB,EAAGxB,KAC7CA,GAAIwB,EAAGxB,GACPkB,IAAKM,EAAGxB,QAGhB,kBAACrC,EAAA,EAAD,CACIG,QAAQ,UACR+D,UAAWlB,KAAK1C,MAAMsB,aAF1B,UAUR,OAJIoB,KAAKxD,MAAMiB,UACXiD,EAAO,kBAACS,EAAA,EAAD,OAIP,yBAAK1E,UAAWC,IAAQ0E,aACpB,uDACCV,OAzI2D,GAA2BW,aA6IpGC,MC5JYC,sBAAWlE,aALF,SAAAC,GAAK,MAAK,CAC9BP,YAAaO,EAAMC,cAAcR,YACjCyE,UAAWlE,EAAMI,MAAM8D,aAGDnE,CAAA,4MAGlBoE,yBAA2B,WACvB,EAAKjF,MAAMkF,QAAQC,UAJL,EAMlBC,yBAA2B,WACvB,EAAKpF,MAAMkF,QAAQG,QAAQ,2BAPb,uDAYd,IAAIC,EAAU,kBAAC,IAAD,CAAUC,GAAG,MAE3B,GAAI/B,KAAKxD,MAAMO,YAAa,CAExB,IAAMiF,EAAoBhC,KAAKxD,MAAMgF,UAAY,kBAAC,IAAD,CAAUO,GAAG,MAAS,KAEvED,EAAU,6BACLE,EACD,kBAAC,EAAD,CACI9E,kBAAmB8C,KAAKyB,yBACxBrE,kBAAmB4C,KAAK4B,yBACxB7E,YAAaiD,KAAKxD,MAAMO,cAC5B,kBAAC,IAAD,CACIkF,KAAMjC,KAAKxD,MAAM0F,MAAMD,KAAO,gBAC9BE,UAAWf,KAGvB,OAAOU,MA7BO,GACET,gB,gCCd5B,uEAIe,SAASP,EAAMtE,GAE1B,IAAI4F,EAAe,KACfC,EAAe,CAAC3F,IAAQ4F,cAK5B,OAHI9F,EAAMuE,SAAWvE,EAAMwE,gBAAkBxE,EAAM0C,SAC/CmD,EAAa7B,KAAK9D,IAAQ6F,SAEtB/F,EAAM6B,aACV,IAAM,QAEF+D,EAAe,yCACX3F,UAAW4F,EAAaG,KAAK,MACzBhG,EAAM8B,cAFC,CAGXE,MAAOhC,EAAMgC,MACbiE,aAAgBjG,EAAM8B,cAAcmE,aACpCC,SAAUlG,EAAMyE,WACpB,MACJ,IAAM,WACFmB,EAAe,4CACX3F,UAAW4F,EAAaG,KAAK,MACzBhG,EAAM8B,cAFC,CAGXE,MAAOhC,EAAMgC,MACbkE,SAAUlG,EAAMyE,WACpB,MACJ,IAAM,SACFmB,EAAe,4BACX3F,UAAW4F,EAAaG,KAAK,KAC7BhE,MAAOhC,EAAMgC,MACbkE,SAAUlG,EAAMyE,SACfzE,EAAM8B,cAAcC,QAAQqC,KAAI,SAAA+B,GAAG,OAChC,4BACIpC,IAAKoC,EAAInE,MACTA,MAAOmE,EAAInE,OACVmE,EAAIlE,kBAIjB,MACJ,QACI2D,EAAe,yCACX3F,UAAW4F,EAAaG,KAAK,KAC7BE,SAAUlG,EAAMyE,SACZzE,EAAM8B,cAHC,CAIXE,MAAOhC,EAAMgC,SAGzB,IAAIoE,EAAkB,KAQtB,OAPIpG,EAAMuE,SAAWvE,EAAM0C,UACvB0D,EAAkB,uBAClBnG,UAAWC,IAAQmG,iBADD,wBAEQrG,EAAM6C,GAFd,MAOlB,yBAAK5C,UAAWC,IAAQoE,OACpB,2BAAOrE,UAAWC,IAAQoG,OAAQtG,EAAMuG,OACvCX,EACAQ,K,mBC9DbI,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,uBAAuB,gBAAkB,iC,mBCA1KD,EAAOC,QAAU,CAAC,gBAAkB,2C,mBCApCD,EAAOC,QAAU,CAAC,YAAc","file":"static/js/3.dc3bba7e.chunk.js","sourcesContent":["import React from 'react'\nimport classes from './CheckoutSummary.module.css'\n\nimport Burger from './../../Burger/Burger'\nimport Button from './../../UI/Button/Button'\nexport default function CheckoutSummary(props) {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{\n                width: \"100%\",\n                margin: \"auto\",\n            }}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button\n                clicked={props.checkoutCancelled}\n                btnType=\"Danger\" >CANCEL</Button>\n            <Button\n                clicked={props.checkoutContinued}\n                btnType=\"Success\" >CONTINUE</Button>\n\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport classes from './ContactData.module.css'\n\nimport axios from './../../../axios-orders'\n\nimport { updatedObj, checkValidity } from './../../../shared/transUtilities'\n\nimport Button from './../../../components/UI/Button/Button'\nimport Spinner from './../../../components/UI/Spinner/Spinner'\nimport Input from './../../../components/UI/Input/Input'\nimport withErrorHandler from './../../../hoc/withErrorHandler/withErrorHandler'\n\nimport * as actions from './../../../store/actions/index'\n\nconst mapStateToProps = state => ({\n    ingredients: state.burgerBuilder.ingredients,\n    totalPrice: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(class ContactData extends Component {\n\n    state = {\n        orderForm: {\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' }\n                    ],\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false,\n    }\n\n    componentDidMount() {\n        this.setState({\n            orderForm: {\n                name: this.completeForm('input', 'text', 'Your name'),\n                email: this.completeForm('input', 'email', 'Your email'),\n                street: this.completeForm('input', 'text', 'street'),\n                zipCode: this.completeForm('input', 'text', 'ZIP Code'),\n                country: this.completeForm('input', 'text', 'Your country'),\n                ...this.state.orderForm,\n            }\n        })\n    }\n\n    completeForm = (elementType, type, placeholder) => {\n        return {\n            elementType: elementType,\n            elementConfig: {\n                type: type,\n                placeholder: placeholder\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 5,\n            },\n            valid: false,\n            touched: false\n        }\n    }\n\n    inputChangedHandler = (e, id) => {\n\n        const updatedFormEl = updatedObj(this.state.orderForm[id], {\n            value: e.target.value,\n            valid: checkValidity(e.target.value, this.state.orderForm[id].validation),\n            touched: true\n        })\n\n        const updatedOrderForm = updatedObj(this.state.orderForm, {\n            [id]: updatedFormEl\n\n        })\n\n        let formIsValid = true;\n\n        for (let id in updatedOrderForm) {\n            formIsValid = updatedOrderForm[id].valid && formIsValid\n        }\n\n        this.setState({\n            orderForm: updatedOrderForm,\n            formIsValid: formIsValid\n        })\n\n    }\n\n\n    orderHandler = (e) => {\n        e.preventDefault()\n        this.setState({ loading: true })\n\n        const formData = {};\n\n        for (let id in this.state.orderForm) {\n            formData[id] = this.state.orderForm[id].value;\n        }\n\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.totalPrice,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token)\n    }\n\n\n    render() {\n\n        const formElementsArray = []\n        for (let key in this.state.orderForm) {\n\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(el => (\n                    <Input\n                        elementType={el.config.elementType}\n                        elementConfig={el.config.elementConfig}\n                        value={el.config.value}\n                        invalid={!el.config.valid}\n                        shouldValidate={el.config.validation}\n                        touched={el.config.touched}\n                        changed={e => this.inputChangedHandler(e, el.id)}\n                        id={el.id}\n                        key={el.id} />\n                ))}\n\n                <Button\n                    btnType=\"Success\"\n                    disabled={!this.state.formIsValid}\n                >ORDER</Button>\n            </form>\n        )\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        )\n    }\n}, axios))\n","import React, { Component } from 'react'\nimport { Route, withRouter, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport CheckoutSummery from './../../components/Order/CheckoutSummary/CheckoutSummary'\nimport ContactData from './ContactData/ContactData'\n\n\nconst mapStateToProps = state => ({\n    ingredients: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n})\n\nexport default withRouter(connect(mapStateToProps)\n    (class Checkout extends Component {\n\n        checkoutCancelledHandler = () => {\n            this.props.history.goBack()\n        }\n        checkoutContinuedHandler = () => {\n            this.props.history.replace('/checkout/contact-data')\n        }\n\n        render() {\n\n            let summary = <Redirect to=\"/\" />\n\n            if (this.props.ingredients) {\n\n                const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null\n\n                summary = <div>\n                    {purchasedRedirect}\n                    <CheckoutSummery\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}\n                        ingredients={this.props.ingredients} />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </div>\n            }\n            return summary\n        }\n    }))\n","import React from 'react'\n\nimport classes from './Input.module.css'\n\nexport default function Input(props) {\n\n    let inputElement = null;\n    let inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n    switch (props.elementType) {\n        case ('input'):\n\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                autoComplete = {props.elementConfig.autoComplete}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(opt => (\n                    <option\n                        key={opt.value}\n                        value={opt.value}>\n                        {opt.displayValue}\n                    </option>\n                ))}\n            </select>;\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                onChange={props.changed}\n                {...props.elementConfig}\n                value={props.value} />;\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p \n        className={classes.ValidationError}>\n            Please enter a valid {props.id}!\n            </p>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};"],"sourceRoot":""}