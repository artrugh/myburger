{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","autoComplete","onChange","changed","options","map","opt","key","displayValue","validationError","ValidationError","id","Label","label","module","exports","CheckoutSummary","style","width","margin","Burger","ingredients","Button","clicked","checkoutCancelled","btnType","checkoutContinued","connect","state","burgerBuilder","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","orderForm","deliveryMethod","validation","valid","formIsValid","completeForm","type","placeholder","required","minLength","inputChangedHandler","e","updatedFormEl","updatedObj","target","checkValidity","updatedOrderForm","setState","orderHandler","preventDefault","formData","price","this","name","email","street","zipCode","country","formElementsArray","config","form","onSubmit","el","disabled","Spinner","ContactData","Component","axios","withRouter","purchased","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","path","match","component"],"mappings":"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","file":"static/js/3.ede2f668.chunk.js","sourcesContent":["import React from 'react'\n\nimport classes from './Input.module.css'\n\nexport default function Input(props) {\n\n    let inputElement = null;\n    let inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n    switch (props.elementType) {\n        case ('input'):\n\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                autoComplete = {props.elementConfig.autoComplete}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(opt => (\n                    <option\n                        key={opt.value}\n                        value={opt.value}>\n                        {opt.displayValue}\n                    </option>\n                ))}\n            </select>;\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                onChange={props.changed}\n                {...props.elementConfig}\n                value={props.value} />;\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p \n        className={classes.ValidationError}>\n            Please enter a valid {props.id}!\n            </p>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from 'react'\nimport classes from './CheckoutSummary.module.css'\n\nimport Burger from './../../Burger/Burger'\nimport Button from './../../UI/Button/Button'\nexport default function CheckoutSummary(props) {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{\n                width: \"100%\",\n                margin: \"auto\",\n            }}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button\n                clicked={props.checkoutCancelled}\n                btnType=\"Danger\" >CANCEL</Button>\n            <Button\n                clicked={props.checkoutContinued}\n                btnType=\"Success\" >CONTINUE</Button>\n\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport classes from './ContactData.module.css'\n\nimport axios from './../../../axios-orders'\n\nimport { updatedObj, checkValidity } from './../../../shared/transUtilities'\n\nimport Button from './../../../components/UI/Button/Button'\nimport Spinner from './../../../components/UI/Spinner/Spinner'\nimport Input from './../../../components/UI/Input/Input'\nimport withErrorHandler from './../../../hoc/withErrorHandler/withErrorHandler'\n\nimport * as actions from './../../../store/actions/index'\n\nconst mapStateToProps = state => ({\n    ingredients: state.burgerBuilder.ingredients,\n    totalPrice: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(class ContactData extends Component {\n\n    state = {\n        orderForm: {\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' }\n                    ],\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false,\n    }\n\n    componentDidMount() {\n        this.setState({\n            orderForm: {\n                name: this.completeForm('input', 'text', 'Your name'),\n                email: this.completeForm('input', 'email', 'Your email'),\n                street: this.completeForm('input', 'text', 'street'),\n                zipCode: this.completeForm('input', 'text', 'ZIP Code'),\n                country: this.completeForm('input', 'text', 'Your country'),\n                ...this.state.orderForm,\n            }\n        })\n    }\n\n    completeForm = (elementType, type, placeholder) => {\n        return {\n            elementType: elementType,\n            elementConfig: {\n                type: type,\n                placeholder: placeholder\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 5,\n            },\n            valid: false,\n            touched: false\n        }\n    }\n\n    inputChangedHandler = (e, id) => {\n\n        const updatedFormEl = updatedObj(this.state.orderForm[id], {\n            value: e.target.value,\n            valid: checkValidity(e.target.value, this.state.orderForm[id].validation),\n            touched: true\n        })\n\n        const updatedOrderForm = updatedObj(this.state.orderForm, {\n            [id]: updatedFormEl\n\n        })\n\n        let formIsValid = true;\n\n        for (let id in updatedOrderForm) {\n            formIsValid = updatedOrderForm[id].valid && formIsValid\n        }\n\n        this.setState({\n            orderForm: updatedOrderForm,\n            formIsValid: formIsValid\n        })\n\n    }\n\n\n    orderHandler = (e) => {\n        e.preventDefault()\n        this.setState({ loading: true })\n\n        const formData = {};\n\n        for (let id in this.state.orderForm) {\n            formData[id] = this.state.orderForm[id].value;\n        }\n\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.totalPrice,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token)\n    }\n\n\n    render() {\n\n        const formElementsArray = []\n        for (let key in this.state.orderForm) {\n\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(el => (\n                    <Input\n                        elementType={el.config.elementType}\n                        elementConfig={el.config.elementConfig}\n                        value={el.config.value}\n                        invalid={!el.config.valid}\n                        shouldValidate={el.config.validation}\n                        touched={el.config.touched}\n                        changed={e => this.inputChangedHandler(e, el.id)}\n                        id={el.id}\n                        key={el.id} />\n                ))}\n\n                <Button\n                    btnType=\"Success\"\n                    disabled={!this.state.formIsValid}\n                >ORDER</Button>\n            </form>\n        )\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        )\n    }\n}, axios))\n","import React, { Component } from 'react'\nimport { Route, withRouter, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport CheckoutSummery from './../../components/Order/CheckoutSummary/CheckoutSummary'\nimport ContactData from './ContactData/ContactData'\n\n\nconst mapStateToProps = state => ({\n    ingredients: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n})\n\nexport default withRouter(connect(mapStateToProps)\n    (class Checkout extends Component {\n\n        checkoutCancelledHandler = () => {\n            this.props.history.goBack()\n        }\n        checkoutContinuedHandler = () => {\n            this.props.history.replace('/checkout/contact-data')\n        }\n\n        render() {\n\n            let summary = <Redirect to=\"/\" />\n\n            if (this.props.ingredients) {\n\n                const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null\n\n                summary = <div>\n                    {purchasedRedirect}\n                    <CheckoutSummery\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}\n                        ingredients={this.props.ingredients} />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </div>\n            }\n            return summary\n        }\n    }))\n"],"sourceRoot":""}