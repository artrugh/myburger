{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css"],"names":["connect","state","error","auth","loading","isAuth","token","building","burgerBuilder","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onSetAuthRedirectPath","controls","elementType","elementConfig","type","placeholder","autoComplete","value","validation","required","valid","touched","minLength","inputChangedHandler","e","controlName","updatedControls","updatedObj","target","checkValidity","setState","submitHandler","preventDefault","props","switchAuthModeHandler","prevState","this","console","log","formElementsArray","key","push","id","config","form","map","el","invalid","shouldValidate","changed","errorMessage","message","to","className","classes","Auth","onSubmit","btnType","clicked","Component","Input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","opt","displayValue","validationError","ValidationError","Label","label","module","exports"],"mappings":"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","file":"static/js/4.cbee4174.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport Input from './../../components/UI/Input/Input'\nimport Button from './../../components/UI/Button/Button'\nimport Spinner from './../../components/UI/Spinner/Spinner'\n\nimport classes from './Auth.module.css'\n\nimport * as actions from './../../store/actions/index'\n\nimport { updatedObj, checkValidity } from './../../shared/transUtilities'\n\nconst mapStateToProps = state => ({\n    error: state.auth.error,\n    loading: state.auth.loading,\n    isAuth: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(class Auth extends Component {\n\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your email',\n                    autoComplete: 'email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    email: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your password',\n                    autoComplete: 'current-password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignUp: true\n\n    }\n\n    componentDidMount() {\n        if (!this.props.building && this.props.authRedirectPath !== '/') {\n            console.log(\"return to home\");\n\n            this.props.onSetAuthRedirectPath()\n        }\n    }\n\n    inputChangedHandler = (e, controlName) => {\n\n        const updatedControls = updatedObj(this.state.controls, {\n            [controlName]: updatedObj(this.state.controls[controlName], {\n                value: e.target.value,\n                valid: checkValidity(e.target.value,\n                    this.state.controls[controlName].validation),\n                touched: true\n            })\n        })\n\n        this.setState({ controls: updatedControls })\n\n    }\n\n    submitHandler = e => {\n        e.preventDefault()\n        const email = this.state.controls.email.value\n        const password = this.state.controls.password.value\n        const isSignUp = this.state.isSignUp\n        this.props.onAuth(email, password, isSignUp)\n\n    }\n\n    switchAuthModeHandler = () => this.setState(prevState => ({\n        isSignUp: !prevState.isSignUp\n    }))\n\n    render() {\n\n        const formElementsArray = []\n        for (let key in this.state.controls) {\n\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        let form = formElementsArray.map(el =>\n            <Input\n                elementType={el.config.elementType}\n                elementConfig={el.config.elementConfig}\n                value={el.config.value}\n                invalid={!el.config.valid}\n                shouldValidate={el.config.validation}\n                touched={el.config.touched}\n                changed={e => this.inputChangedHandler(e, el.id)}\n                id={el.id}\n                key={el.id}\n            />)\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        let errorMessage = null\n        if (this.props.error) {\n            errorMessage = <p>{this.props.error.message}</p>\n        }\n\n        if (this.props.isAuth) {\n            return <Redirect to={this.props.authRedirectPath} />\n        }\n        return (\n            <div className={classes.Auth}>\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType='Success'>SUBMIT</Button >\n                </form>\n                <Button\n                    clicked={this.switchAuthModeHandler}\n                    btnType='Danger'>\n                    SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}\n                </Button >\n            </div>\n        )\n    }\n})\n","import React from 'react'\n\nimport classes from './Input.module.css'\n\nexport default function Input(props) {\n\n    let inputElement = null;\n    let inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n    switch (props.elementType) {\n        case ('input'):\n\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                autoComplete = {props.elementConfig.autoComplete}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(opt => (\n                    <option\n                        key={opt.value}\n                        value={opt.value}>\n                        {opt.displayValue}\n                    </option>\n                ))}\n            </select>;\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                onChange={props.changed}\n                {...props.elementConfig}\n                value={props.value} />;\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p \n        className={classes.ValidationError}>\n            Please enter a valid {props.id}!\n            </p>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};"],"sourceRoot":""}