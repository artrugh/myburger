{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/AuthFormData.js","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","autoComplete","onChange","changed","options","map","opt","key","displayValue","validationError","ValidationError","id","Label","label","module","exports","authFormData","email","type","placeholder","validation","required","valid","password","minLength","Auth","useState","authForm","setAuthForm","isSignUp","setIsSignUp","error","useSelector","state","auth","loading","isAuth","token","building","burgerBuilder","authRedirectPath","dispatch","useDispatch","onSetAuthRedirectPath","useCallback","actions","useEffect","console","log","output","Spinner","formElementsArray","config","el","e","controlName","updatedControls","updatedObj","target","checkValidity","inputChangedHandler","errorMessage","message","to","onSubmit","preventDefault","onAuth","Button","btnType","clicked"],"mappings":"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","file":"static/js/4.d562c291.chunk.js","sourcesContent":["import React from 'react'\n\nimport classes from './Input.module.css'\n\nexport default function Input(props) {\n\n    let inputElement = null;\n    // SET THE STYLE CLASSES\n    let inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        // IF THE INPUT IS INVALID, STYLE IT\n        inputClasses.push(classes.Invalid)\n    }\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                autoComplete={props.elementConfig.autoComplete}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(opt => (\n                    <option\n                        key={opt.value}\n                        value={opt.value}>\n                        {opt.displayValue}\n                    </option>\n                ))}\n            </select>;\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                onChange={props.changed}\n                {...props.elementConfig}\n                value={props.value} />;\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = (\n            <p\n                className={classes.ValidationError}>\n                Please enter a valid {props.id}!\n            </p>\n        )\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","export const authFormData = {\n    email: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'email',\n            placeholder: 'Your email',\n            autoComplete: 'email'\n        },\n        value: '',\n        validation: {\n            required: true,\n            email: true\n        },\n        valid: false,\n        touched: false\n    },\n    password: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'password',\n            placeholder: 'Your password',\n            autoComplete: 'current-password'\n        },\n        value: '',\n        validation: {\n            required: true,\n            minLength: 6\n        },\n        valid: false,\n        touched: false\n    }\n}","import React, { useState, useEffect, useCallback } from 'react'\nimport { Redirect } from 'react-router-dom'\n\n// REACT-REDUX\nimport { useSelector, useDispatch } from 'react-redux'\n\n// ALL ACTIONS\nimport * as actions from './../../store/actions/index'\n\n// DATA FOR BUILTFORM\nimport { authFormData } from './AuthFormData'\n\n// UTILITIES FUNCTIONS\nimport { updatedObj, checkValidity } from './../../shared/transUtilities'\n\n// STYLE\nimport classes from './Auth.module.css'\n\n// COMPONENTS\nimport Input from './../../components/UI/Input/Input'\nimport Button from './../../components/UI/Button/Button'\nimport Spinner from './../../components/UI/Spinner/Spinner'\n\nexport default function Auth() {\n\n    // INITIATE THE FORM\n    const [authForm, setAuthForm] = useState(authFormData)\n    // SET WANT ISSIGNUP\n    const [isSignUp, setIsSignUp] = useState(true)\n\n    // ACCECSS THE REDUCERS\n    const error = useSelector(state => state.auth.error)\n    const loading = useSelector(state => state.auth.loading)\n    const isAuth = useSelector(state => state.auth.token !== null)\n    const building = useSelector(state => state.burgerBuilder.building)\n    const authRedirectPath = useSelector(state => state.auth.authRedirectPath)\n\n    // DISPATCH FUNCTIONS\n    const dispatch = useDispatch()\n    // SIGNUP\n    const onAuth = (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp))\n    // REDIRECT\n    const onSetAuthRedirectPath = useCallback(() => dispatch(actions.setAuthRedirectPath('/')), [dispatch])\n\n    useEffect(() => {\n        // IF THE USER IS NOT BUILDING A BURGER \n        // AND THE STORED PATH IS NOT HOME\n        // STORE / HOME AS A PATH\n        if (!building && authRedirectPath !== '/') {\n            console.log(\"return to home\");\n            onSetAuthRedirectPath()\n        }\n    }, [building, authRedirectPath, onSetAuthRedirectPath])\n\n    // HANDLER EVENTS\n    const inputChangedHandler = (e, controlName) => {\n        // BUILD THE FORM\n        const updatedControls = updatedObj(authForm, {\n            [controlName]: updatedObj(authForm[controlName], {\n                value: e.target.value,\n                valid: checkValidity(e.target.value,\n                    authForm[controlName].validation),\n                touched: true\n            })\n        })\n        // STORE IT IN THE HOOK\n        setAuthForm(updatedControls)\n    }\n\n    const submitHandler = e => {\n        e.preventDefault()\n        const email = authForm.email.value\n        const password = authForm.password.value\n        // SIGN UP\n        onAuth(email, password, isSignUp)\n    }\n\n    // SWITCH UI MESSAGE - SIGNUP || LOGIN\n    const switchAuthModeHandler = () => setIsSignUp(!isSignUp)\n\n    // PRERENDER\n\n    // IF NOT LOADING RENDER THE FORM OTHERWISE SPINNER\n    let output;\n    if (!loading) {\n        const formElementsArray = []\n        for (let key in authForm) {\n            formElementsArray.push({\n                id: key,\n                config: authForm[key]\n            })\n        }\n        output = formElementsArray.map(el =>\n            <Input\n                elementType={el.config.elementType}\n                elementConfig={el.config.elementConfig}\n                value={el.config.value}\n                invalid={!el.config.valid}\n                shouldValidate={el.config.validation}\n                touched={el.config.touched}\n                changed={e => inputChangedHandler(e, el.id)}\n                id={el.id}\n                key={el.id}\n            />)\n    } else {\n        output = <Spinner />\n    }\n\n    // SHOW ERROR\n    let errorMessage = null\n    if (error) {\n        errorMessage = <p>{error.message}</p>\n    }\n    // AFTER THE USER LOGIN REDIRECT TO THE STORED / PATH\n    if (isAuth) {\n        return <Redirect to={authRedirectPath} />\n    }\n\n    return (\n        <div className={classes.Auth}>\n            {errorMessage}\n            <form onSubmit={submitHandler}>\n                {output}\n                <Button\n                    btnType='Success'>\n                    SUBMIT\n                </Button >\n            </form>\n            <Button\n                clicked={switchAuthModeHandler}\n                btnType='Danger'>\n                SWITCH TO {isSignUp ? 'SIGNIN' : 'SIGNUP'}\n            </Button >\n        </div>\n    )\n}"],"sourceRoot":""}