{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/AuthFormData.js","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","autoComplete","onChange","changed","options","map","opt","key","displayValue","validationError","ValidationError","id","Label","label","module","exports","authFormData","email","type","placeholder","validation","required","valid","password","minLength","Auth","useState","authForm","setAuthForm","isSignUp","setIsSignUp","error","useSelector","state","auth","loading","isAuth","token","building","burgerBuilder","authRedirectPath","dispatch","useDispatch","onSetAuthRedirectPath","useCallback","actions","useEffect","console","log","formElementsArray","config","form","el","e","controlName","updatedControls","updatedObj","target","checkValidity","inputChangedHandler","Spinner","errorMessage","message","to","onSubmit","preventDefault","onAuth","Button","btnType","clicked"],"mappings":"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","file":"static/js/4.127426c3.chunk.js","sourcesContent":["import React from 'react'\n\nimport classes from './Input.module.css'\n\nexport default function Input(props) {\n\n    let inputElement = null;\n    let inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n    switch (props.elementType) {\n        case ('input'):\n\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                autoComplete = {props.elementConfig.autoComplete}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(opt => (\n                    <option\n                        key={opt.value}\n                        value={opt.value}>\n                        {opt.displayValue}\n                    </option>\n                ))}\n            </select>;\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                onChange={props.changed}\n                {...props.elementConfig}\n                value={props.value} />;\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p \n        className={classes.ValidationError}>\n            Please enter a valid {props.id}!\n            </p>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","export const authFormData = {\n    email: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'email',\n            placeholder: 'Your email',\n            autoComplete: 'email'\n        },\n        value: '',\n        validation: {\n            required: true,\n            email: true\n        },\n        valid: false,\n        touched: false\n    },\n    password: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'password',\n            placeholder: 'Your password',\n            autoComplete: 'current-password'\n        },\n        value: '',\n        validation: {\n            required: true,\n            minLength: 6\n        },\n        valid: false,\n        touched: false\n    }\n}","import React, { useState, useEffect, useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport Input from './../../components/UI/Input/Input'\nimport Button from './../../components/UI/Button/Button'\nimport Spinner from './../../components/UI/Spinner/Spinner'\n\nimport classes from './Auth.module.css'\n\nimport * as actions from './../../store/actions/index'\nimport { authFormData } from './AuthFormData'\n\nimport { updatedObj, checkValidity } from './../../shared/transUtilities'\n\nexport default function Auth() {\n\n    // STATE\n    const [authForm, setAuthForm] = useState(authFormData)\n    const [isSignUp, setIsSignUp] = useState(true)\n\n    const error = useSelector(state => state.auth.error)\n    const loading = useSelector(state => state.auth.loading)\n    const isAuth = useSelector(state => state.auth.token !== null)\n    const building = useSelector(state => state.burgerBuilder.building)\n    const authRedirectPath = useSelector(state => state.auth.authRedirectPath)\n\n    // DISPATCH\n    const dispatch = useDispatch()\n    const onAuth = (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp))\n    const onSetAuthRedirectPath = useCallback(() => dispatch(actions.setAuthRedirectPath('/')), [dispatch])\n\n    useEffect(() => {\n        if (!building && authRedirectPath !== '/') {\n            console.log(\"return to home\");\n            onSetAuthRedirectPath()\n        }\n    }, [building, authRedirectPath ,onSetAuthRedirectPath])\n\n    // HANDLER EVENTS\n    const inputChangedHandler = (e, controlName) => {\n        const updatedControls = updatedObj(authForm, {\n            [controlName]: updatedObj(authForm[controlName], {\n                value: e.target.value,\n                valid: checkValidity(e.target.value,\n                    authForm[controlName].validation),\n                touched: true\n            })\n        })\n        setAuthForm(updatedControls)\n    }\n\n    const submitHandler = e => {\n        e.preventDefault()\n        const email = authForm.email.value\n        const password = authForm.password.value\n        onAuth(email, password, isSignUp)\n    }\n\n    const switchAuthModeHandler = () => setIsSignUp(!isSignUp)\n\n    const formElementsArray = []\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n        })\n    }\n\n    let form = formElementsArray.map(el =>\n        <Input\n            elementType={el.config.elementType}\n            elementConfig={el.config.elementConfig}\n            value={el.config.value}\n            invalid={!el.config.valid}\n            shouldValidate={el.config.validation}\n            touched={el.config.touched}\n            changed={e => inputChangedHandler(e, el.id)}\n            id={el.id}\n            key={el.id}\n        />)\n\n    if (loading) {\n        form = <Spinner />\n    }\n    let errorMessage = null\n    if (error) {\n        errorMessage = <p>{error.message}</p>\n    }\n\n    if (isAuth) {\n        return <Redirect to={authRedirectPath} />\n    }\n    return (\n        <div className={classes.Auth}>\n            {errorMessage}\n            <form onSubmit={submitHandler}>\n                {form}\n                <Button btnType='Success'>SUBMIT</Button >\n            </form>\n            <Button\n                clicked={switchAuthModeHandler}\n                btnType='Danger'>\n                SWITCH TO {isSignUp ? 'SIGNIN' : 'SIGNUP'}\n            </Button >\n        </div>\n    )\n}"],"sourceRoot":""}